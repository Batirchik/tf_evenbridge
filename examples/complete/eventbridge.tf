provider "aws" {
  region = "eu-west-1"

  # Make it faster by skipping something
  skip_metadata_api_check     = true
  skip_region_validation      = true
  skip_credentials_validation = true
  skip_requesting_account_id  = true
}

module "eventbridge" {
  source = "terraform-aws-modules/eventbridge/aws"

  create_bus = false

  # Some targets are only working with the default bus, so we don't have to create a new one like this:
  create_schemas_discoverer = true

  attach_tracing_policy = true

  attach_sfn_policy = true
  sfn_target_arns   = [module.step_function.state_machine_arn]


  attach_cloudwatch_policy = true
  cloudwatch_target_arns   = [aws_cloudwatch_log_group.this.arn]

  append_rule_postfix = false

  rules = {

    request_to_process_pattern = {
      description   = "Capture event generated by request lambda"
      event_pattern = jsonencode({ "source" : ["user-event"], "detail-type": ["request_to_process"] })
      enabled       = true
    }

    response_pattern = {
      description   = "Capture event generated by SF processing"
      event_pattern = jsonencode({ "source" : ["user-event"], "detail-type": ["response_to_return"] })
      enabled       = true
    }
  }

  targets = {
    request_to_process_pattern = [
      {
        name            = "process-with-sfn"
        arn             = module.step_function.state_machine_arn
        attach_role_arn = true
      },
      {
        name = "log-request-to-cloudwatch"
        arn  = aws_cloudwatch_log_group.this.arn
      }
    ]

    response_pattern = [
      {
        name  = "something-for-cron"
        arn   = module.lambda_function_response.lambda_function_arn
        input = jsonencode({ "job" : "crons" })
      },
      {
        name = "log-response-to-cloudwatch"
        arn  = aws_cloudwatch_log_group.this.arn
      }
    ]
  }

  ######################
  # Additional policies
  ######################

  attach_policy_json = true
  policy_json        = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "xray:GetSamplingStatisticSummaries"
      ],
      "Resource": ["*"]
    }
  ]
}
EOF

  attach_policy_jsons = true
  policy_jsons = [<<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "xray:*"
      ],
      "Resource": ["*"]
    }
  ]
}
EOF
  ]
  number_of_policy_jsons = 1

  attach_policies    = true
  policies           = ["arn:aws:iam::aws:policy/AWSXrayReadOnlyAccess"]
  number_of_policies = 1

  attach_policy_statements = true
  policy_statements = {
    s3_read = {
      effect    = "Deny",
      actions   = ["s3:HeadObject", "s3:GetObject"],
      resources = ["arn:aws:s3:::my-bucket/*"]
      condition = {
        stringequals_condition = {
          test     = "StringEquals"
          variable = "aws:PrincipalOrgID"
          values   = ["123456789012"]
        }
      }
    }
  }
}

locals {
  order_input_transformer = {
    input_paths = {
      order_id = "$.detail.order_id"
    }
    input_template = <<EOF
    {
      "id": <order_id>
    }
    EOF
  }
}

##################
# Extra resources
##################

resource "random_pet" "this" {
  length = 2
}

resource "aws_cloudwatch_log_group" "this" {
  name = "/aws/events/${random_pet.this.id}"

  tags = {
    Name = "${random_pet.this.id}-log-group"
  }
}



